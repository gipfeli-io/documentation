"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1408],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},153:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));n(8209);const o={id:"frontend-deployment",sidebar_position:2,title:"Frontend deployment"},i=void 0,l={unversionedId:"infrastructure/frontend-deployment",id:"infrastructure/frontend-deployment",title:"Frontend deployment",description:"Our frontend is built with React using Create React App as a",source:"@site/docs/infrastructure/frontend-deployment.md",sourceDirName:"infrastructure",slug:"/infrastructure/frontend-deployment",permalink:"/docs/infrastructure/frontend-deployment",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"frontend-deployment",sidebar_position:2,title:"Frontend deployment"},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/infrastructure/basics"},next:{title:"Backend deployment",permalink:"/docs/infrastructure/backend-deployment"}},s={},p=[{value:"Deployment steps",id:"deployment-steps",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Our frontend is built with ",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React")," using ",(0,a.kt)("a",{parentName:"p",href:"https://create-react-app.dev/"},"Create React App")," as a\nskeleton builder. Currently, the build output is served via a lightweight ",(0,a.kt)("a",{parentName:"p",href:"https://www.nginx.com/"},"Nginx")," webserver."),(0,a.kt)("admonition",{title:"Why we're using Nginx to serve a static website",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Given that a React app is built and only consists of static files (Javascript, CSS, HTML, etc.), there are several ways\nhow these files can be served. Using Nginx is the most straightforward approach since its a basic webserver that serves\nfiles and it comes with all amenities such as GZIP compression, routing and so on."),(0,a.kt)("p",{parentName:"admonition"},"However, it could become more cost-efficient to drop Cloud Run and serve the files from a simple Storage Bucket. That\nwould require a Load Balancer, though, and at the moment the costs of adding a Load Balancer are far higher than using\nCloud Run.")),(0,a.kt)("h2",{id:"deployment-steps"},"Deployment steps"),(0,a.kt)("p",null,"Deployment always happens when a push is sent to main or stage. This triggers\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gipfeli-io/gipfeli-frontend/blob/main/.github/workflows/ci.yml"},"GitHub Action")," that\nperforms the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Run all the the steps in the ",(0,a.kt)("inlineCode",{parentName:"li"},"test-and-build")," job, consisting of",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Run tests"),(0,a.kt)("li",{parentName:"ol"},"Set up environment variables: Because our frontend is statically built, all environment variables need to be\ninjected at buildtime, i.e. in this action's context. As such, they are added to ",(0,a.kt)("inlineCode",{parentName:"li"},"$GITHUB_ENV")," which makes them\navailable as normal environment variables to the build context. Since they are different for staging and main,\nthey can be conditionally defined, and they may also use GitHub secrets."),(0,a.kt)("li",{parentName:"ol"},"Build the container assigning it a unique name (",(0,a.kt)("inlineCode",{parentName:"li"},"gcr.io/{project_id}/{app_name}-{environment}:{commit_sha}"),") and\nproviding the correct build args"),(0,a.kt)("li",{parentName:"ol"},"If we are pushing to either ",(0,a.kt)("inlineCode",{parentName:"li"},"stage")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"main"),":",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"establish connection to our Google Cloud account using the\nofficial ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/google-github-actions/auth"},"google-github-actions/auth")," step."),(0,a.kt)("li",{parentName:"ol"},"We can now use ",(0,a.kt)("inlineCode",{parentName:"li"},"gcloud")," tools. First, we configure the container registry."),(0,a.kt)("li",{parentName:"ol"},"We then push the image to the Google Cloud Container Registry"))))),(0,a.kt)("li",{parentName:"ol"},"Depending on whether we push to ",(0,a.kt)("inlineCode",{parentName:"li"},"stage")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"main"),", we run either the ",(0,a.kt)("inlineCode",{parentName:"li"},"deploy-stage")," or the ",(0,a.kt)("inlineCode",{parentName:"li"},"deploy-main")," job. They do\nthe same but use different endpoints to deploy the correct environment. This takes the following steps:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Authenticate with Google Cloud again"),(0,a.kt)("li",{parentName:"ol"},"Deploy the previously pushed image using ",(0,a.kt)("inlineCode",{parentName:"li"},"gcloud run deploy")))),(0,a.kt)("li",{parentName:"ol"},"After this, the deployment starts, boots up our new image as a new CloudRun pod, performs healthchecks and gracefully\nreplaces the previous running pod with our new pod, redirecting all traffic to this pod.")),(0,a.kt)("admonition",{title:"SonarCloud",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Because we do not use coverage analysis in the frontend as we do in the backend, we can use SonarCloud's automatic scan.\nThis is the default for any repository that is configured within SonarCloud and executes automatically on each action\nrun. It will also automagically create a comment on every pull request with a short summary.")))}u.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);