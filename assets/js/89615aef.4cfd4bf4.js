"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[155],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=i,g=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},61404:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={id:"testing-strategy",sidebar_position:2,title:"Testing strategy"},u=void 0,l={unversionedId:"guidelines/testing-strategy",id:"guidelines/testing-strategy",title:"Testing strategy",description:"Our testing strategy differs between frontend and backend. We do not aim for 100% testcoverage, but rather for a",source:"@site/docs/guidelines/testing-strategy.md",sourceDirName:"guidelines",slug:"/guidelines/testing-strategy",permalink:"/docs/guidelines/testing-strategy",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"testing-strategy",sidebar_position:2,title:"Testing strategy"},sidebar:"tutorialSidebar",previous:{title:"Branching strategy",permalink:"/docs/guidelines/branching-strategy"}},c={},d=[{value:"Backend",id:"backend",level:2},{value:"Frontend",id:"frontend",level:2}],p={toc:d};function f(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Our testing strategy differs between frontend and backend. We do not aim for 100% testcoverage, but rather for a\nwell-thought subset of functionality that is covered by unit tests."),(0,o.kt)("h2",{id:"backend"},"Backend"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Unit-tests:")," All services have to be unit-tested. If there are additional features (e.g. decorators, utility\nfunctions), they should be unit-tested as well."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Integration-tests:")," Routes can be integration tested to check whether the interplay between controller <->\nservice <-> database does work.")),(0,o.kt)("h2",{id:"frontend"},"Frontend"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Unit-tests:")," Only components that have special functionality (e.g. in terms of logged-in state) have to be\nunit-tests. We do not unit test each and every simple component and or route."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Integration-tests:")," Integration-tests should mainly deal with ensuring that authorization is implemented properly.")))}f.isMDXComponent=!0}}]);