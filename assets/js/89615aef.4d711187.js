"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[155],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),g=a,f=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1404:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));n(8209);const o={id:"testing-strategy",sidebar_position:2,title:"Testing strategy"},i=void 0,s={unversionedId:"guidelines/testing-strategy",id:"guidelines/testing-strategy",title:"Testing strategy",description:"Our testing strategy differs between frontend and backend. We do not aim for 100% test coverage, but rather for a",source:"@site/docs/guidelines/testing-strategy.md",sourceDirName:"guidelines",slug:"/guidelines/testing-strategy",permalink:"/docs/guidelines/testing-strategy",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"testing-strategy",sidebar_position:2,title:"Testing strategy"},sidebar:"tutorialSidebar",previous:{title:"Branching strategy",permalink:"/docs/guidelines/branching-strategy"},next:{title:"Conventions",permalink:"/docs/guidelines/conventions"}},c={},l=[{value:"Backend",id:"backend",level:2},{value:"Frontend",id:"frontend",level:2}],u={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Our testing strategy differs between frontend and backend. We do not aim for 100% test coverage, but rather for a\nwell-thought subset of functionality that is covered by unit tests. Because we see our backend as the critical part, we enforce a strict coverage requirement of ",(0,a.kt)("strong",{parentName:"p"},"at least 80%")," on new code to ensure we cover new code and work towards a generally high test coverage in the backend. For the frontend, we do not enforce this since we do not aim to have a specific coverage, but rather test some specific, single cases."),(0,a.kt)("h2",{id:"backend"},"Backend"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Unit-tests:")," All services have to be unit-tested. If there are additional features (e.g. decorators, utility\nfunctions), they should be unit-tested as well."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Integration-tests:")," Routes can be integration tested to check whether the interplay between controller <->\nservice <-> database does work. Note that these are called ",(0,a.kt)("inlineCode",{parentName:"li"},"e2e-tests")," in nest.js language.")),(0,a.kt)("h2",{id:"frontend"},"Frontend"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Unit-tests:")," Only components that have special functionality (e.g. in terms of logged-in state) have to be\nunit-tests. We do not unit test each and every simple component and or route.")))}d.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);