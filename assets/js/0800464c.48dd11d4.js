"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3897],{4294:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=i(7462),n=(i(7294),i(3905));i(1839);const o={id:"api-architecture",sidebar_position:2,title:"API Architecture"},s=void 0,r={unversionedId:"architecture/api-architecture",id:"architecture/api-architecture",title:"API Architecture",description:"We are using the out-of-the-box architecture provided by NestJS which consists of a modular approach. Each domain gets",source:"@site/docs/architecture/api.md",sourceDirName:"architecture",slug:"/architecture/api-architecture",permalink:"/docs/architecture/api-architecture",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"api-architecture",sidebar_position:2,title:"API Architecture"},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/architecture/basics"},next:{title:"Frontend Architecture",permalink:"/docs/architecture/frontend-architecture"}},l={},d=[{value:"Modules",id:"modules",level:2},{value:"Modules",id:"modules-1",level:3},{value:"App",id:"app",level:4},{value:"Tour",id:"tour",level:4},{value:"User",id:"user",level:4},{value:"Auth",id:"auth",level:4},{value:"Media",id:"media",level:4},{value:"Notification",id:"notification",level:4},{value:"Utils",id:"utils",level:4},{value:"Other non-modules",id:"other-non-modules",level:3},{value:"TypeORM",id:"typeorm",level:2},{value:"Migrations",id:"migrations",level:3},{value:"Handling user uploaded media related to tours",id:"handling-user-uploaded-media-related-to-tours",level:2},{value:"Cleaning up",id:"cleaning-up",level:3}],h={toc:d};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"We are using the out-of-the-box architecture provided by NestJS which consists of a modular approach. Each domain gets\nits own feature module which can then be imported by other modules (by default modules are singletons and thus can be\nshared). Each NestJS application has at least one root module which is the starting point for NestJS to build the\ninternal data structure to resolve relationships between modules, providers and dependencies. Using the recommended\narchitecture gives us a scalable, testable ad loosely coupled application which is also easily maintainable. In\naddition, it allows us to the CLI NestJS provides which makes creating new components (modules, services, controllers\netc.) easy and fast."),(0,n.kt)("img",{src:"https://www.plantuml.com/plantuml/png/bPN1Ri8m38RlUOg8Uv4OS4LCsoGkcz1W9xH3rXeQKP8gCKXeshilILkQfAt6Zlxz9xO_XxBKo1IUJmNHHovAfjY9fl9KIW42DtWjW2f8aOb30OIKB3so0z3HLfxLY7uJBX3KdgL0LzljcZ9Dymd99pHH2TrPqvCKg6HHWFeaiK2JP56vDg0kF8NQqaGqoHh3EvHISvJgMdiyWOwpyOAkfSQ30bsbNmHovA1DiXWFtT5d2ZjvHlcFh3_hZmVhGyCGh0UIFrImh2c05GaLB2ksJVXH3SjAmQ2H4CEowPX3xnrzfh0J7yVVsI5OZsVC1s3DI3whO5bJ02iIAbXMR9lOWDPSYdYEkqor743fQZ5RUxK_TbYgBzkPATfkJny-krV8E1k0DoVvl8BdN46bMAdmERNjruKncBiz0RfOYS6vlC-chqmdtnsfOrahUU4PADqu8hu3hRQkfEScVmDl4lcUfmpDbkmYThxGd8aUV5aEh6nAycdztijoyEE2lD2kr8hfzdaP2x4_CpesmpiFiU-fDpGsOYgumAgtm7xKRe4Rkptb3qPShYlRyss9rXI5hWmX6KFsnRIPgNa9TYmpoH94PlwXVW40",alt:"Overall"}),(0,n.kt)("h2",{id:"modules"},"Modules"),(0,n.kt)("p",null,"Each module represents a domain or a task in our application and may consist of the following elements:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"DTOs"),(0,n.kt)("li",{parentName:"ul"},"Interfaces"),(0,n.kt)("li",{parentName:"ul"},"Types"),(0,n.kt)("li",{parentName:"ul"},"Controllers"),(0,n.kt)("li",{parentName:"ul"},"Services"),(0,n.kt)("li",{parentName:"ul"},"Validators"),(0,n.kt)("li",{parentName:"ul"},"Decorators"),(0,n.kt)("li",{parentName:"ul"},"Providers")),(0,n.kt)("p",null,"There are also some more elements you can have in a module. Please refer to the official NestJS documentation for a\ncomplete overview: ",(0,n.kt)("a",{parentName:"p",href:"https://docs.nestjs.com"},"NestJS Documentation")),(0,n.kt)("h3",{id:"modules-1"},"Modules"),(0,n.kt)("h4",{id:"app"},"App"),(0,n.kt)("p",null,"The app module is the root module of the application. For nest.js, this is like the entrypoint module that exposes all\nthe modules (that need exposure) to the route creator. Its controller also has some convenience routes, e.g. for\nexposing a ",(0,n.kt)("inlineCode",{parentName:"p"},"robots.txt")," file."),(0,n.kt)("h4",{id:"tour"},"Tour"),(0,n.kt)("p",null,"This module represents the ",(0,n.kt)("inlineCode",{parentName:"p"},"Tour")," domain object. It exposes CRUD routes for dealing with tours, which is handled by its\nservice. As such, it also needs the user module to attach a tour to a user."),(0,n.kt)("h4",{id:"user"},"User"),(0,n.kt)("p",null,"The user module represents the ",(0,n.kt)("inlineCode",{parentName:"p"},"User")," domain object and exposes CRUD routes for dealing with users. This module exposes\nsome minor routes, but in essence, it is only used by other modules. It is only dependent on the utils module for\nhashing the user passwords."),(0,n.kt)("h4",{id:"auth"},"Auth"),(0,n.kt)("p",null,"This module handles all our authentication needs as well as session management. It implements various authentication\nstrategies for different endpoints and exposes them to be used in other modules. It is dependent on the user and\nnotification module, because the auth module handles things like login and user creation, which require both the users\nas well as the possibility to dispatch notifications."),(0,n.kt)("h4",{id:"media"},"Media"),(0,n.kt)("p",null,"The mediamodule handles all things related to user uploads. It has several providers which perform various tasks, like\nstoring it to a cloud storage or extracting GPS coordinates from images. It is dependent on the notification, user and\ntour module for notifying administrators of clean up tasks and also attaching uploads to tours and users."),(0,n.kt)("h4",{id:"notification"},"Notification"),(0,n.kt)("p",null,"This module only exposes the internally used notification provider. All modules that need to create notifications may\nimport this module and get an environment-dependent notification provider (e.g. sendgrid, ",(0,n.kt)("inlineCode",{parentName:"p"},"console.log"),")."),(0,n.kt)("h4",{id:"utils"},"Utils"),(0,n.kt)("p",null,"For elements which do not have a domain per se (e.g. a service to hash passwords) we created a module that adds helpers\nwe need in different parts of the application."),(0,n.kt)("h3",{id:"other-non-modules"},"Other non-modules"),(0,n.kt)("p",null,"Besides the mentioned modules, the project also relies upon a ",(0,n.kt)("inlineCode",{parentName:"p"},"config")," directory which populates nest's ",(0,n.kt)("inlineCode",{parentName:"p"},"ConfigService"),"\nwith several namespaces. These configuration values are populated through environment variables and exposed via the\nservice wherever they are needed."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"shared")," directory consists of elements that are not part of a module, but shared across the whole application.\nCurrently, only our ",(0,n.kt)("inlineCode",{parentName:"p"},"SentryInterceptor")," is placed there, which is used to intercept any error and log it to Sentry."),(0,n.kt)("h2",{id:"typeorm"},"TypeORM"),(0,n.kt)("p",null,"Out-of-the-box, TypeORM uses the repository pattern which means that each entity has its own repository. The\nrepositories can be used by using TypeORM's generic repository which provides functionalities to query all entities or\nexecute CRUD operations. As we do not need custom queries at the moment we can use the generic repository which means\nthat there are no repository files listed in our modules."),(0,n.kt)("h3",{id:"migrations"},"Migrations"),(0,n.kt)("p",null,"The folder containing the migrations TypeORM will use to synchronize entity information to the database is not managed\ninside the source-folder (src). Because the migration lifecycle is maintained by the TypeORM CLI they should not be a\npart of source code."),(0,n.kt)("p",null,"To get more information on the recommended architecture using TypeORM and NestJS please refer to\nthe ",(0,n.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/techniques/database#database"},"NestJS documentation"),". For details on TypeORM please check\nout ",(0,n.kt)("a",{parentName:"p",href:"https://typeorm.io/"},"typeorm.io"),"."),(0,n.kt)("h2",{id:"handling-user-uploaded-media-related-to-tours"},"Handling user uploaded media related to tours"),(0,n.kt)("p",null,"Tours can have GPX files and/or images attached to them. These files are provided during the creation/editing process of\na tour. In order to provide users with a seamless user experience, the media handling is a bit more complex than just\nuploading the files once the form is submitted. Since a user should be able to upload several files at once and also\nsubmit a new tour without having to wait a long time (because he may also submit 20, 30 or more images as well as a GPX\nfile), media files are uploaded immediately once they are dropped in the corresponding dropzone in the frontend."),(0,n.kt)("p",null,"Backendwise, the following steps are performed (for brevity, only the case for an image is explained; however, it works\nthe same for a GPX file but with different endpoint):"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The request (with an image) is POSTed to ",(0,n.kt)("inlineCode",{parentName:"li"},"media/upload-image"),". After some basic validations (e.g. filetypes,\nfilesize), the request is dispatched to the ",(0,n.kt)("inlineCode",{parentName:"li"},"MediaService"),"."),(0,n.kt)("li",{parentName:"ol"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"MediaService")," uses the storage provider that is injected via nest's DI container to store the file. In our case,\nthis is the ",(0,n.kt)("inlineCode",{parentName:"li"},"GoogleCloudStorageProvider"),"."),(0,n.kt)("li",{parentName:"ol"},"Once the provider succesfully returns the identifier for the uploaded file, the ",(0,n.kt)("inlineCode",{parentName:"li"},"MediaService")," stores a new ",(0,n.kt)("inlineCode",{parentName:"li"},"Image"),"\nobject in the database, consisting of the storage identifier, a UUID and the relation to the ",(0,n.kt)("inlineCode",{parentName:"li"},"User")," who submitted the\nrequest. At this point, the relation to ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour")," is null, because we might not yet have an existing ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour")," object (e.g.\nin the case of adding a new tour)."),(0,n.kt)("li",{parentName:"ol"},"The UUID and identifier of the newly stored ",(0,n.kt)("inlineCode",{parentName:"li"},"Image")," entity is then returned as response to the intial POST request\nand stored in the frontend's current formstate."),(0,n.kt)("li",{parentName:"ol"},"Once the user submits the complete form, they only submit the UUIDs of the images they still have in their form. The\nrequest to create or update a ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour")," then synchronizes the ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour")," relationship between the image.")),(0,n.kt)("p",null,"This approach has the following benefits:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A user gets immediate feedback whether their files can be saved or not."),(0,n.kt)("li",{parentName:"ul"},"A user can still upload files and, before they actually submit the whole ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour"),", can still decide to drop some\nfiles. If so, it's just the UUIDs that are not sent and no relation to a ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour")," on the previously updated file is\nmade."),(0,n.kt)("li",{parentName:"ul"},"The backend can easily see which files do not have a relation to a ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour")," and can be deleted from the CloudStorage;\ne.g. via a Cronjob that periodically checks for missing relations and asks CloudStorage to remove these files.")),(0,n.kt)("p",null,"The only drawback is that we use storage that may not be needed (e.g. if a user drops several images into the form and\nthen does not save the tour). However, given that the storage is very cheap and we limit the file size to 2MB, this can\nbe neglected."),(0,n.kt)("h3",{id:"cleaning-up"},"Cleaning up"),(0,n.kt)("p",null,"As mentioned above, not all uploaded and stored files may be linked to a tour. Furthermore, when a user deletes a tour,\nthe files are not immediately deleted, because this might take some time. Instead, the relation to the deleted ",(0,n.kt)("inlineCode",{parentName:"p"},"Tour"),"\nis set to ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL"),". The same also holds true if a user is deleted - since their tours are deleted, the ",(0,n.kt)("inlineCode",{parentName:"p"},"Tour")," relation on\nall their files is set to ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL")," as well as the user relation."),(0,n.kt)("p",null,"In order to clean up, the backend has a special API path, ",(0,n.kt)("inlineCode",{parentName:"p"},"GET api/media/clean-up-media")," that finds all media objects in\nthe database that either have"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"no relation to a ",(0,n.kt)("inlineCode",{parentName:"li"},"User")," (meaning the user is deleted) or"),(0,n.kt)("li",{parentName:"ul"},"no relation to a ",(0,n.kt)("inlineCode",{parentName:"li"},"Tour"),"(meaning the tour is deleted) ",(0,n.kt)("strong",{parentName:"li"},"and")," are older than 1 day (this is required because if a user\nis in the process of uploading a file, it may not yet have a relation to a tour, but it should not yet be deleted).")),(0,n.kt)("p",null,"Objects that fulfill this criteria are then deleted from the storage and the database and an email with clean up\nstatistics is sent to the defined administrators."),(0,n.kt)("p",null,"This endpoint is (weakly) protected by a simple bearer token that is defined as an environment variable. This is\nsufficient (even-though insecure) because this endpoint does not expose anything sensitive. Furthermore, the token is\nchosen to be a long, randomized string and as SSL connections are enforced, the Authorization header is encrypted."),(0,n.kt)("p",null,"In staging and production, this endpoint is triggered via a Cloud Scheduler task and runs once daily at 4 o'clock in the\nmorning."))}u.isMDXComponent=!0}}]);