"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[155],{1404:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=n(7462),s=(n(7294),n(3905));n(1839);const a={id:"testing-strategy",sidebar_position:2,title:"Testing strategy"},r=void 0,o={unversionedId:"guidelines/testing-strategy",id:"guidelines/testing-strategy",title:"Testing strategy",description:"Our testing strategy differs between frontend and backend. We do not aim for 100% testcoverage, but rather for a",source:"@site/docs/guidelines/testing-strategy.md",sourceDirName:"guidelines",slug:"/guidelines/testing-strategy",permalink:"/docs/guidelines/testing-strategy",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"testing-strategy",sidebar_position:2,title:"Testing strategy"},sidebar:"tutorialSidebar",previous:{title:"Branching strategy",permalink:"/docs/guidelines/branching-strategy"},next:{title:"Conventions",permalink:"/docs/guidelines/conventions"}},l={},d=[{value:"Backend",id:"backend",level:2},{value:"Frontend",id:"frontend",level:2}],u={toc:d};function g(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,i.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Our testing strategy differs between frontend and backend. We do not aim for 100% testcoverage, but rather for a\nwell-thought subset of functionality that is covered by unit tests."),(0,s.kt)("h2",{id:"backend"},"Backend"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Unit-tests:")," All services have to be unit-tested. If there are additional features (e.g. decorators, utility\nfunctions), they should be unit-tested as well."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Integration-tests:")," Routes can be integration tested to check whether the interplay between controller <->\nservice <-> database does work.")),(0,s.kt)("h2",{id:"frontend"},"Frontend"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Unit-tests:")," Only components that have special functionality (e.g. in terms of logged-in state) have to be\nunit-tests. We do not unit test each and every simple component and or route."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Integration-tests:")," Integration-tests should mainly deal with ensuring that authorization is implemented properly.")))}g.isMDXComponent=!0}}]);