"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[931],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,v=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return t?i.createElement(v,r(r({ref:n},u),{},{components:t})):i.createElement(v,r({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},22038:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var i=t(87462),o=t(63366),a=(t(67294),t(3905)),r=["components"],s={id:"conventions",sidebar_position:3,title:"Conventions"},l=void 0,c={unversionedId:"guidelines/conventions",id:"guidelines/conventions",title:"Conventions",description:"Naming conventions",source:"@site/docs/guidelines/conventions.md",sourceDirName:"guidelines",slug:"/guidelines/conventions",permalink:"/docs/guidelines/conventions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"conventions",sidebar_position:3,title:"Conventions"},sidebar:"tutorialSidebar",previous:{title:"Testing strategy",permalink:"/docs/guidelines/testing-strategy"}},u={},d=[{value:"Naming conventions",id:"naming-conventions",level:2},{value:"Backend",id:"backend",level:3},{value:"Files",id:"files",level:4},{value:"Frontend",id:"frontend",level:3},{value:"Files",id:"files-1",level:4},{value:"Props",id:"props",level:4},{value:"Coding Conventions",id:"coding-conventions",level:2},{value:"Frontend",id:"frontend-1",level:3},{value:"Types",id:"types",level:4},{value:"Functions",id:"functions",level:4}],p={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"naming-conventions"},"Naming conventions"),(0,a.kt)("h3",{id:"backend"},"Backend"),(0,a.kt)("h4",{id:"files"},"Files"),(0,a.kt)("p",null,"NestJS is heavily inspired by Angular so the naming convention is too. The following pattern is used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"[Filename part as Kebab case]",".","[type]",".","[filetype]"," e.g. user-data.controller.ts")),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"It is recommended to use the Nest cli as this automatically generates the correct filename (and structure). "))),(0,a.kt)("h3",{id:"frontend"},"Frontend"),(0,a.kt)("h4",{id:"files-1"},"Files"),(0,a.kt)("p",null,"We use one of the most common naming conventions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kebab case for file names (folder names and elements that do not represent a component)"),(0,a.kt)("li",{parentName:"ul"},"Pascal case for component names")),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Component names in React need to be pascal case as this is a restriction from React. Component names should also\nbe the same as the filename. The rest can be freely decided."))),(0,a.kt)("h4",{id:"props"},"Props"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We use ",(0,a.kt)("inlineCode",{parentName:"li"},"type")," not ",(0,a.kt)("inlineCode",{parentName:"li"},"interface")),(0,a.kt)("li",{parentName:"ul"},"Props should be Pascal case"),(0,a.kt)("li",{parentName:"ul"},"Props are defined in the component they are used"),(0,a.kt)("li",{parentName:"ul"},"Destructuring should be used when passing the props to the component constructor")),(0,a.kt)("h2",{id:"coding-conventions"},"Coding Conventions"),(0,a.kt)("h3",{id:"frontend-1"},"Frontend"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Components always return the Element.JSX type so we do not explicitly write it"),(0,a.kt)("li",{parentName:"ul"},"Where we need to add an explicit type:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Return type of functions"),(0,a.kt)("li",{parentName:"ul"},"Function parameters"),(0,a.kt)("li",{parentName:"ul"},"Variables: only if it is not clear what the type of the variable is or if we want to highlight the type"))),(0,a.kt)("li",{parentName:"ul"},"We should not use ",(0,a.kt)("inlineCode",{parentName:"li"},"any")," unless it is not possible otherwise")),(0,a.kt)("h4",{id:"functions"},"Functions"),(0,a.kt)("p",null,"We decided to not use the function keyword but instead use an arrow function.\nE.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"const someFunction = () => {}")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"function someFunction(){}")))}m.isMDXComponent=!0}}]);