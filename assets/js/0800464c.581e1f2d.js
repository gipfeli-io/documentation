"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3897],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},24294:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],s={id:"architecture_api",sidebar_position:2,title:"API Architecture"},c=void 0,l={unversionedId:"architecture/architecture_api",id:"architecture/architecture_api",title:"API Architecture",description:"We are using the out-of-the-box architecture provided by NestJS which consists of a modular approach. Each domain gets",source:"@site/docs/architecture/api.md",sourceDirName:"architecture",slug:"/architecture/architecture_api",permalink:"/docs/architecture/architecture_api",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"architecture_api",sidebar_position:2,title:"API Architecture"},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/architecture/basics"},next:{title:"Basics",permalink:"/docs/infrastructure/basics"}},u={},p=[{value:"Structure",id:"structure",level:2},{value:"Modules",id:"modules",level:3},{value:"Utils Module",id:"utils-module",level:4},{value:"Project structure",id:"project-structure",level:4},{value:"TypeORM",id:"typeorm",level:3},{value:"Migrations",id:"migrations",level:4}],d={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We are using the out-of-the-box architecture provided by NestJS which consists of a modular approach. Each domain gets\nits own feature module\nwhich can then be imported by other modules (by default modules are singletons and thus can be shared). Each NestJS\napplication\nhas at least one root module which is the starting point for NestJS to build the internal data structure to resolve\nrelationships between\nmodules, providers and dependencies. Using the recommended architecture gives us a scalable, testable ad loosely coupled\napplication which is also\neasily maintainable. In addition, it allows us to the CLI NestJS provides which makes creating new components (modules,\nservices, controllers etc.) easy and fast."),(0,a.kt)("img",{src:"https://www.plantuml.com/plantuml/png/bPDFQyCm3CNl-XIYzmJQtal7DkYnhDcfxE0bMcFgsCPM1cNiky_Edou92MEtwEaXFV_ix3qBntMbm5-bjiA92dDJMQD9yublYj1Hpa9V505OaL_5XN2LcTgjy0kaPd8V8YSyPDaHXSTo3UKQ4vVWEPeUZMPdb2Bt1bC1asJNkaxaFcLEdQMlC2bwmmjPuoKRT-iy0m7J8jtXqNY-EF9j-rcpP4a-D5MwD6FED4xonEOVtU5PlmUmNZqjmTf0kMbXHTC8raHeOKNnDyImwc15QNJGYJ255TjJ3hCpvapZ94CSVtUNO3tKN4POv_Xn7p5oMBj0SmlbjgKPF8ktmLBvPiD1-D46YBam3GaR3yG4isMmGTZG556z5_4LX3bG21RlmeTjFUcuCEpOaox2p_O3",alt:"Overall"}),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("h3",{id:"modules"},"Modules"),(0,a.kt)("p",null,"Each module represents a domain in our application and may consist of the following elements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DTOs"),(0,a.kt)("li",{parentName:"ul"},"Interfaces"),(0,a.kt)("li",{parentName:"ul"},"Types"),(0,a.kt)("li",{parentName:"ul"},"Controllers"),(0,a.kt)("li",{parentName:"ul"},"Services"),(0,a.kt)("li",{parentName:"ul"},"Validators"),(0,a.kt)("li",{parentName:"ul"},"Decorators")),(0,a.kt)("p",null,"There are also some more elements you can have in a module. Please refer to the official NestJS documentation for a\ncomplete overview: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com"},"NestJS Documentation")),(0,a.kt)("h4",{id:"utils-module"},"Utils Module"),(0,a.kt)("p",null,"For elements which do not have a domain per se (e.g. a service to hash passwords) we created a module that\nadds helpers we need in different parts of the application."),(0,a.kt)("h4",{id:"project-structure"},"Project structure"),(0,a.kt)("p",null,"The above principles give us the following project structure (to keep it easily readable we only show the root module (\napp) and the tour module):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"gipfeli-api/\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u2502   \u251c\u2500\u2500 app.controller.ts\n\u2502   \u2502   \u251c\u2500\u2500 app.module.ts\n\u2502   \u2502   \u2514\u2500\u2500 app.service.ts\n\u2502   \u251c\u2500\u2500 tour/\n\u2502   \u2502   \u251c\u2500\u2500 dto/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 validators/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 is-point.decorator.spec.ts\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 is-point.decorator.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tour.ts\n\u2502   \u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tour.entity.ts\n\u2502   \u2502   \u251c\u2500\u2500 mocks/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 tour.data.mock.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tour.repository.mock.ts\n\u2502   \u2502   \u251c\u2500\u2500 tour.controller.spec.ts\n\u2502   \u2502   \u251c\u2500\u2500 tour.controller.ts\n\u2502   \u2502   \u251c\u2500\u2500 tour.module.ts\n\u2502   \u2502   \u251c\u2500\u2500 tour.service.spec.ts\n\u2502   \u2502   \u2514\u2500\u2500 tour.service.ts\n\u2502   \u2514\u2500\u2500 main.ts\n\u2514\u2500\u2500 test\n")),(0,a.kt)("h3",{id:"typeorm"},"TypeORM"),(0,a.kt)("p",null,"Out-of-the-box, TypeORM uses the repository pattern which means that each entity has its own repository. The\nrepositories can be used by using TypeORM's generic\nrepository which provides functionalities to query all entities or execute CRUD operations. As we do not need custom\nqueries at the moment we can use the generic\nrepository which means that there are no repository files listed in our modules."),(0,a.kt)("h4",{id:"migrations"},"Migrations"),(0,a.kt)("p",null,"The folder containing the migrations TypeORM will use to synchronize entity information to the database is not managed\ninside the source-folder (src). Because the\nmigration lifecycle is maintained by the TypeORM CLI they should not be a part of source code."),(0,a.kt)("p",null,"To get more information on the recommended architecture using TypeORM and NestJS please refer to\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/techniques/database#database"},"NestJS documentation"),".\nFor details on TypeORM please check out ",(0,a.kt)("a",{parentName:"p",href:"https://typeorm.io/"},"typeorm.io"),"."))}m.isMDXComponent=!0}}]);