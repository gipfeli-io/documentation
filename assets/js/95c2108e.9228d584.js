"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[931],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return t?o.createElement(f,a(a({ref:n},u),{},{components:t})):o.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2038:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(7462),i=(t(7294),t(3905));t(8209);const r={id:"conventions",sidebar_position:3,title:"Conventions"},a=void 0,l={unversionedId:"guidelines/conventions",id:"guidelines/conventions",title:"Conventions",description:"Naming conventions",source:"@site/docs/guidelines/conventions.md",sourceDirName:"guidelines",slug:"/guidelines/conventions",permalink:"/docs/guidelines/conventions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"conventions",sidebar_position:3,title:"Conventions"},sidebar:"tutorialSidebar",previous:{title:"Testing strategy",permalink:"/docs/guidelines/testing-strategy"}},s={},c=[{value:"Naming conventions",id:"naming-conventions",level:2},{value:"Backend",id:"backend",level:3},{value:"Files",id:"files",level:4},{value:"Frontend",id:"frontend",level:3},{value:"Files",id:"files-1",level:4},{value:"Props",id:"props",level:4},{value:"Coding Conventions",id:"coding-conventions",level:2},{value:"Frontend",id:"frontend-1",level:3},{value:"Types",id:"types",level:4},{value:"Functions",id:"functions",level:4}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"naming-conventions"},"Naming conventions"),(0,i.kt)("h3",{id:"backend"},"Backend"),(0,i.kt)("h4",{id:"files"},"Files"),(0,i.kt)("p",null,"NestJS is heavily inspired by Angular so the naming convention is too. The following pattern is used:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[Filename part as Kebab case]",".","[type]",".","[filetype]"," e.g. user-data.controller.ts")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended to use the Nest cli as this automatically generates the correct filename (and structure). ")),(0,i.kt)("h3",{id:"frontend"},"Frontend"),(0,i.kt)("h4",{id:"files-1"},"Files"),(0,i.kt)("p",null,"We use one of the most common naming conventions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kebab case for file names (folder names and elements that do not represent a component)"),(0,i.kt)("li",{parentName:"ul"},"Pascal case for component names")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Component names in React need to be pascal case as this is a restriction from React. Component names should also\nbe the same as the filename. The rest can be freely decided.")),(0,i.kt)("h4",{id:"props"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We use ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," not ",(0,i.kt)("inlineCode",{parentName:"li"},"interface")),(0,i.kt)("li",{parentName:"ul"},"Props should be Pascal case"),(0,i.kt)("li",{parentName:"ul"},"Props are defined in the component they are used"),(0,i.kt)("li",{parentName:"ul"},"Destructuring should be used when passing the props to the component constructor")),(0,i.kt)("h2",{id:"coding-conventions"},"Coding Conventions"),(0,i.kt)("h3",{id:"frontend-1"},"Frontend"),(0,i.kt)("h4",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Components always return the Element.JSX type so we do not explicitly write it"),(0,i.kt)("li",{parentName:"ul"},"Where we need to add an explicit type:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Return type of functions"),(0,i.kt)("li",{parentName:"ul"},"Function parameters"),(0,i.kt)("li",{parentName:"ul"},"Variables: only if it is not clear what the type of the variable is or if we want to highlight the type"))),(0,i.kt)("li",{parentName:"ul"},"We should not use ",(0,i.kt)("inlineCode",{parentName:"li"},"any")," unless it is not possible otherwise")),(0,i.kt)("h4",{id:"functions"},"Functions"),(0,i.kt)("p",null,"We decided to not use the function keyword but instead use an arrow function.\nE.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"const someFunction = () => {}")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"function someFunction(){}")))}p.isMDXComponent=!0},8209:(e,n,t)=>{t(7294)}}]);