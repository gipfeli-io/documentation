"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[931],{2038:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(7462),o=(t(7294),t(3905));t(1839);const a={id:"conventions",sidebar_position:3,title:"Conventions"},s=void 0,l={unversionedId:"guidelines/conventions",id:"guidelines/conventions",title:"Conventions",description:"Naming conventions",source:"@site/docs/guidelines/conventions.md",sourceDirName:"guidelines",slug:"/guidelines/conventions",permalink:"/docs/guidelines/conventions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"conventions",sidebar_position:3,title:"Conventions"},sidebar:"tutorialSidebar",previous:{title:"Testing strategy",permalink:"/docs/guidelines/testing-strategy"}},r={},d=[{value:"Naming conventions",id:"naming-conventions",level:2},{value:"Backend",id:"backend",level:3},{value:"Files",id:"files",level:4},{value:"Frontend",id:"frontend",level:3},{value:"Files",id:"files-1",level:4},{value:"Props",id:"props",level:4},{value:"Coding Conventions",id:"coding-conventions",level:2},{value:"Frontend",id:"frontend-1",level:3},{value:"Types",id:"types",level:4},{value:"Functions",id:"functions",level:4}],u={toc:d};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"naming-conventions"},"Naming conventions"),(0,o.kt)("h3",{id:"backend"},"Backend"),(0,o.kt)("h4",{id:"files"},"Files"),(0,o.kt)("p",null,"NestJS is heavily inspired by Angular so the naming convention is too. The following pattern is used:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"[Filename part as Kebab case]",".","[type]",".","[filetype]"," e.g. user-data.controller.ts")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"It is recommended to use the Nest cli as this automatically generates the correct filename (and structure). ")),(0,o.kt)("h3",{id:"frontend"},"Frontend"),(0,o.kt)("h4",{id:"files-1"},"Files"),(0,o.kt)("p",null,"We use one of the most common naming conventions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Kebab case for file names (folder names and elements that do not represent a component)"),(0,o.kt)("li",{parentName:"ul"},"Pascal case for component names")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Component names in React need to be pascal case as this is a restriction from React. Component names should also\nbe the same as the filename. The rest can be freely decided.")),(0,o.kt)("h4",{id:"props"},"Props"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use ",(0,o.kt)("inlineCode",{parentName:"li"},"type")," not ",(0,o.kt)("inlineCode",{parentName:"li"},"interface")),(0,o.kt)("li",{parentName:"ul"},"Props should be Pascal case"),(0,o.kt)("li",{parentName:"ul"},"Props are defined in the component they are used"),(0,o.kt)("li",{parentName:"ul"},"Destructuring should be used when passing the props to the component constructor")),(0,o.kt)("h2",{id:"coding-conventions"},"Coding Conventions"),(0,o.kt)("h3",{id:"frontend-1"},"Frontend"),(0,o.kt)("h4",{id:"types"},"Types"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Components always return the Element.JSX type so we do not explicitly write it"),(0,o.kt)("li",{parentName:"ul"},"Where we need to add an explicit type:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Return type of functions"),(0,o.kt)("li",{parentName:"ul"},"Function parameters"),(0,o.kt)("li",{parentName:"ul"},"Variables: only if it is not clear what the type of the variable is or if we want to highlight the type"))),(0,o.kt)("li",{parentName:"ul"},"We should not use ",(0,o.kt)("inlineCode",{parentName:"li"},"any")," unless it is not possible otherwise")),(0,o.kt)("h4",{id:"functions"},"Functions"),(0,o.kt)("p",null,"We decided to not use the function keyword but instead use an arrow function.\nE.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"const someFunction = () => {}")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"function someFunction(){}")))}c.isMDXComponent=!0}}]);