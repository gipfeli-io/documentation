"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1976],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>p});var i=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,o=function(e,t){if(null==e)return{};var a,i,o={},n=Object.keys(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=i.createContext({}),d=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(a),p=o,f=h["".concat(s,".").concat(p)]||h[p]||u[p]||n;return a?i.createElement(f,r(r({ref:t},c),{},{components:a})):i.createElement(f,r({ref:t},c))}));function p(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,r=new Array(n);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<n;d++)r[d]=a[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}h.displayName="MDXCreateElement"},6696:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var i=a(7462),o=(a(7294),a(3905));a(8209);const n={id:"offline-support",sidebar_position:2,title:"Offline Support"},r=void 0,l={unversionedId:"architecture/frontend/offline-support",id:"architecture/frontend/offline-support",title:"Offline Support",description:"PWA basics",source:"@site/docs/architecture/frontend/offline-support.md",sourceDirName:"architecture/frontend",slug:"/architecture/frontend/offline-support",permalink:"/docs/architecture/frontend/offline-support",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"offline-support",sidebar_position:2,title:"Offline Support"},sidebar:"tutorialSidebar",previous:{title:"General",permalink:"/docs/architecture/frontend/general"},next:{title:"General",permalink:"/docs/architecture/security/security-general"}},s={},d=[{value:"PWA basics",id:"pwa-basics",level:2},{value:"Static files",id:"static-files",level:2},{value:"Service Worker",id:"service-worker",level:3},{value:"Dynamic data",id:"dynamic-data",level:2},{value:"Storage",id:"storage",level:3},{value:"Implementation",id:"implementation",level:2},{value:"What is accessible offline?",id:"what-is-accessible-offline",level:3},{value:"Resetting",id:"resetting",level:3},{value:"Difficulties",id:"difficulties",level:3},{value:"Flow",id:"flow",level:4},{value:"Browser support",id:"browser-support",level:4},{value:"Synchronize offline data with database",id:"synchronize-offline-data-with-database",level:3},{value:"Articles used",id:"articles-used",level:2},{value:"Google Workbox",id:"google-workbox",level:3}],c={toc:d};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"pwa-basics"},"PWA basics"),(0,o.kt)("p",null,"A PWA (Progressive Web App) is a simple way to give a user the feel of a native app without writing a native app. The application is installable on\na device (can also be a laptop) and can be used accessing an icon on the home screen/desktop. With the help of a manifest file we can configure the\nlook of the app during startup, how it is displayed on the device and the app icon. There are some limitations like accessing the hardware (e.g. storage)\nof a device but overall the app feels like a native app."),(0,o.kt)("h2",{id:"static-files"},"Static files"),(0,o.kt)("h3",{id:"service-worker"},"Service Worker"),(0,o.kt)("p",null,"We are using workbox from Google to work with the service worker. This is the recommended way by React.\nWhen creating a pwa with react-create-app it is pre-installed and pre-configured to precache all items in the manifest.json (ReactJS will inject some additional assets there. So not everything needs\nto be specified manually)."),(0,o.kt)("h2",{id:"dynamic-data"},"Dynamic data"),(0,o.kt)("h3",{id:"storage"},"Storage"),(0,o.kt)("p",null,"The service worker is perfect for caching static data like css files or icons. But for dynamic data we need more control and a way to easily\nand comfortably manipulate data. This is why we use IndexedDb to store our dynamic data when the user is offline. This approach provides us with\nthe possibility to store our objects without needing to transform them e.g. into a JSON string. The data is indexed and therefore can be queried quite\neasily. As IndexedDB is pretty tedious to work with and promise based we are using a wrapper to simplify our work.\nWe decided to use ",(0,o.kt)("a",{parentName:"p",href:"https://dexie.org/"},"Dexie.js")," as it can be used with async/await and provides a nice and easy to use wrapper for the IndexedDB api."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Why not use local storage for storing the data?\nLocal storage is synchronous and therefore blocks the main thread. It is also limited in space and only lets us save strings which makes\nworking with complex data structures very uncomfortable.")),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("h3",{id:"what-is-accessible-offline"},"What is accessible offline?"),(0,o.kt)("p",null,"We decided to only make the tours usable offline. If an administrator wants to modify users they have to do it while online.\nWe decided to allow all the CRUD functionality for tours but to restrict the tour form. As it is nearly impossible to be able to use\nthe map offline due to the amount of (tile) data we need for this we decided to hide the map when the user is offline. We also decided that the\nuser won't be able to upload images while using the offline mode as with the current solution it won't work (we also don't want to\nduplicate the code to extract GPS data from an image). So essentially what is possible to do while using the offline mode:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a new tour, set a title and add the tour documentation"),(0,o.kt)("li",{parentName:"ul"},"Edit an existing tour (title and description)"),(0,o.kt)("li",{parentName:"ul"},"Remove an existing tour"),(0,o.kt)("li",{parentName:"ul"},"View an existing tour (title and description)")),(0,o.kt)("h3",{id:"resetting"},"Resetting"),(0,o.kt)("p",null,"As there sometimes can be situations where the indexedDB is in a non-recoverable state we added the possibility to reset the database.\nThe functionality will remove the existing database structure and all it's data and re-add a freshly initialised database."),(0,o.kt)("h3",{id:"difficulties"},"Difficulties"),(0,o.kt)("h4",{id:"flow"},"Flow"),(0,o.kt)("p",null,"The main difficulties are saving and retrieving locally stored data at the right time. As we essentially work with two different\ndatabases that we need to keep in sync we had to analyse each flow and think about the way we want to handle offline and remote data. Our first\ndraft had the following workflow:"),(0,o.kt)("img",{src:"https://www.plantuml.com/plantuml/png/NP114i8m24NtEGNBzWfreUDuaTXGmnWXqwJMUdffEXErcmo1p_l0AMKxvkaHZ2cHCREdWD3O684IZ1CpyUtO6e0kQWGULNP5cm7PHI7E80FOI0ULqD3qmenz9k5Z2zaZGxDWQhUY4WkOjMS8n0WFSRWNTZTHIHOGhfgLtgM5UpyAqnihmDbiroA6f6Ep5C0TCLQdVuXEJSDUNmr_fjeSlSmrUxMwsbZo2bqWsUVclpKJEtoXkvo_DlgMU-fn9Hfpqh_U-WC0",alt:"First offline flow"}),(0,o.kt)("p",null,"While testing we realised that this is not the optimal way to handle the offline functionality. The constant pinging of the backend was unfortunate\nand always switching between offline/online mode (even with auto sync) would result in sometimes unpredicted behaviour (especially in error cases).\nSo we brainstormed some time and then implemented the following workflow:"),(0,o.kt)("img",{src:"https://www.plantuml.com/plantuml/png/RLD1KkGm3Bpx5JeE1xQux6LoWAfbUG1L-m37KIQk6DdO2gdvFPAT30mxEILMgrlTSfuAsypBMp2clfdZKZ232zxD1IA1fJFyUVtt335XjkmZTUPOa0R8-BvWOU08lNMp77M68YC471aCm4lCm1F2W6nz4AO1N4OhY0-Fgo9MX1H3gAW9HRwNCWXJYfvOv0LJiNKsLN8JkXb6ONQH29qEz6lJUiQ0GguwVmVFobu7hJDOjW8J1lsooRTnAfkUP2mfKa6Z3Uh2-F6mEyp8IwO2lnyUu1v6P3V1A9PmUBpJReB36SkTv3B5LSAGmJAidYVe5sO9KMHF4SHIX3YEmHF2MnomKv6QzobY-Rz-YtslDnNTXVrezY14PqCuTqO6JXAa-0Ku9a-d6-5sjIhwNjUibDTgK9-cARCtoEvDislMkWruPQI1Rz6ndJNzj46wYyoPtCMQcjah60h2WUA5OKPCbS7JZoot1XhykBttSjlcLhZcsK4j9rWdsIKSRkxNV7KUgspHwm5BiRtqBCHoix-kefRrP-XCa_ZHhCCNo0kHBaKTq3S3hQLmJCOyoOV-bPy0",alt:"Current workflow with manual switch between offline and online mode"}),(0,o.kt)("p",null,"Now the user can decide whether they want to use the app in offline mode or wait until they are online again. This makes it clearer for the user\nwhat to expect from the app. We could also clear up a lot of otherwise pretty complicated code parts and make the app easier to maintain and extend."),(0,o.kt)("h4",{id:"browser-support"},"Browser support"),(0,o.kt)("p",null,"Unfortunately there are some browser quirks we have to work with that are not solvable just yet. For example when using Firefox in private mode\nit is not possible to use indexedDB as they restrict it. There is also the problem with iOS devices because the only way to install the application\nis using Safari. Firefox and Chrome on iOS Mobile don't allow installing PWAs."),(0,o.kt)("h3",{id:"synchronize-offline-data-with-database"},"Synchronize offline data with database"),(0,o.kt)("p",null,"When the user decides to go into online mode again we will automatically synchronize all of their data. The only thing we cannot synchronize right\naway are tours that were created while in offline mode. Those tour lack the information about the waypoints which are mandatory for each tour. We\nmark the tour with a batch and as soon as the user is ready they can add the missing information and submit the tour to our server."),(0,o.kt)("h2",{id:"articles-used"},"Articles used"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.dotnetpro.de/core/mobile/offline-mitgedacht-1659518.html"},"Offline Post with usage of dexie")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage#offline_asset_storage"},"Mozilla Client Storage")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://web.dev/storage-for-the-web/"},"web.dev - Storage for the web"))),(0,o.kt)("h3",{id:"google-workbox"},"Google Workbox"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.chrome.com/docs/workbox/caching-strategies-overview/"},"Caching Strategies")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.chrome.com/docs/workbox/modules/workbox-routing/"},"Workbox Routing"))))}u.isMDXComponent=!0},8209:(e,t,a)=>{a(7294)}}]);