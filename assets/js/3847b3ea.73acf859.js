"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5581],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},21959:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=["components"],l={id:"setup",sidebar_position:2,title:"Setup"},s=void 0,p={unversionedId:"setup",id:"setup",title:"Setup",description:"Currently, there is no dockerized configuration for local development. Instead, you have to clone both",source:"@site/docs/setup.md",sourceDirName:".",slug:"/setup",permalink:"/docs/setup",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"setup",sidebar_position:2,title:"Setup"},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/"},next:{title:"Basics",permalink:"/docs/domain/basics"}},u={},d=[{value:"Frontend",id:"frontend",level:2},{value:"Backend",id:"backend",level:2},{value:"Database",id:"database",level:3},{value:"Alternative database setup without docker",id:"alternative-database-setup-without-docker",level:3},{value:"Generate new migration",id:"generate-new-migration",level:3},{value:"Executing migrations",id:"executing-migrations",level:3},{value:"Documentation",id:"documentation",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Currently, there is no dockerized configuration for local development. Instead, you have to clone both\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gipfeli-io/gipfeli-api"},"gipfeli.io API")," as well as\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gipfeli-io/gipfeli-frontend"},"gipfeli.io frontend")," and run both processes manually. If you want\nto contribute to the documentation, use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gipfeli-io/documentation"},"documentation")," repository."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Note that you have to match the ports you're running such that the frontend finds the backend. This can be configured\nvia the ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," variable, so when you run the backend on another port, this has to be adapted."))),(0,i.kt)("h2",{id:"frontend"},"Frontend"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Clone the repository"),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"npm i")," to set up all dependencies"),(0,i.kt)("li",{parentName:"ol"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file based on the ",(0,i.kt)("inlineCode",{parentName:"li"},".env.example")," and adjust the values"),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"npm run dev")," to get a development process with hot-reloading running")),(0,i.kt)("h2",{id:"backend"},"Backend"),(0,i.kt)("h3",{id:"database"},"Database"),(0,i.kt)("p",null,"TypeORM is configured in class ",(0,i.kt)("inlineCode",{parentName:"p"},"src/infrastructure/config/database-config.ts"),". Entities have to be named like this ",(0,i.kt)("inlineCode",{parentName:"p"},"*.entity.ts"),"\nand will be automatically included in the search for changes when generating a new migration."),(0,i.kt)("p",null,"The easiest way to setup the database is to use the postgres postgis docker image. Do the following steps to configure it:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"docker pull postgis/postgis")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"docker run -d --name postgis_docker -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=postgres -p 5432:5432 postgis/postgis"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-p")," : this maps the internal container port to an external port so we can connect to the database from outside of the container"))),(0,i.kt)("li",{parentName:"ol"},"Feel free to create a new database with any naming you like or use the default database 'postgres'. Make sure to update the database name in the .env file.")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Connect to database instance with your favorite db tool (e.g. DBeaver, DataGrip etc.) and use the following config (only working if you executed the docker command as shown above):"),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Host: localhost"),(0,i.kt)("li",{parentName:"ul"},"Port: 5432"),(0,i.kt)("li",{parentName:"ul"},"User: postgres"),(0,i.kt)("li",{parentName:"ul"},"Password: postgres")))),(0,i.kt)("h3",{id:"alternative-database-setup-without-docker"},"Alternative database setup without docker"),(0,i.kt)("p",null,"If you do not want to use docker please install postgres on your machine. You can follow the guides on the official\n",(0,i.kt)("a",{parentName:"p",href:"https://www.postgresql.org/"},"PostgreSQL")," page. "),(0,i.kt)("p",null,"After setting up postgres locally create a new database (if you do not want to use the standard postgres database) and install the PostGIS extension with\n",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION postgis;"),". For more information check out the ",(0,i.kt)("a",{parentName:"p",href:"https://postgis.net/"},"PostGIS")," page."),(0,i.kt)("h3",{id:"generate-new-migration"},"Generate new migration"),(0,i.kt)("p",null,"If you add a new entity you have to generate a migration file.\nExecute the command below after adding the new entity. This will generate a new migration file\nin the folder ",(0,i.kt)("inlineCode",{parentName:"p"},"src/infrastructure/migrations"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm run typeorm\n")),(0,i.kt)("h3",{id:"executing-migrations"},"Executing migrations"),(0,i.kt)("p",null,"Run the command below to execute migrations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm run typeorm-migration\n")),(0,i.kt)("h2",{id:"documentation"},"Documentation"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Clone the repository"),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"npm i")," to set up all dependencies"),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"npm run start")," to get a development process with hot-reloading running")))}m.isMDXComponent=!0}}]);